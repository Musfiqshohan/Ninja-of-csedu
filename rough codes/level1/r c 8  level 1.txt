#include <SFML/Graphics.hpp>
#include<time.h>
#include<iostream>
#include<stdio.h>
#include<string>

using namespace std;
using namespace sf;

bool isCollide(Sprite  s1, Sprite s2)
{
	return s1.getGlobalBounds().intersects(s2.getGlobalBounds());
}
int coin_sect[50];
int main()
{

	int i, xod = 600, upward = 200, j, s, flag = 0, count = 0, posx = 0, posy = 0, flag2 = 1, up = 0, fl = 0, ninja_starflag = 0, 
		nsf = 0, ns = 0, star_num = 10,jump_flag=0,player_height=300;
	enum Task  { Run, Jump, Slide };
	int distance[16];
	int cdistance[10], pdistance[10], muldistance[4];
	distance[0] = 0;
	for (i = 1; i < 4; i++)
	{
		distance[i] = distance[i - 1] + 500 + rand() % 100;

	}


	for (i = 4; i < 16; i++)
	{
		distance[i] = distance[i - 1] + 900 + rand() % 100;
		if (i < 8)
			cdistance[i - 4] = distance[i] - 300;
		else if (i < 12)
			pdistance[i - 8] = distance[i] - 300;
		else if (i < 15)
			muldistance[i - 12] = distance[i] - 300;

	}




	Clock clock;
	float timer = 0, delay = 0.1;
	float frameCounter = 0, switchFrame = 100, frameSpeed = 500;
	RenderWindow window(VideoMode(800, 600), "The Game!");

	window.setFramerateLimit(10);
	Vector2i source(0, Run);

	Texture pTexture, bart, tground, tobstacle, game_over, pcoins, b1Texture, cTexture, pstar, pythontexture, mulTexture;
	Sprite playerImage, bars, sground, sgame_over, b1Image, b2Image;
	Sprite sobstacle[20], coins[100], cImage[4], ninja_star[20], python[4], multi[3];

	if (!b1Texture.loadFromFile("MrShadow.jpg"))
		cout << "Error could not load player image" << endl;

	b1Image.setTexture(b1Texture);
	b2Image.setTexture(b1Texture);



	cTexture.loadFromFile("c_language.png");
	for (i = 0; i < 4; i++)
		cImage[i].setTexture(cTexture);

	pythontexture.loadFromFile("c++.png");
	for (i = 0; i < 3; i++)
		python[i].setTexture(pythontexture);


	mulTexture.loadFromFile("multimeter.png");
	for (i = 0; i < 3; i++)
		multi[i].setTexture(mulTexture);

	pstar.loadFromFile("ninja_star222.png");
	for (i = 0; i < 20; i++)
	{
		ninja_star[i].setTexture(pstar);
		ninja_star[i].setPosition(-50, -50);
	}


	b2Image.setPosition(800, 0);


	if (!pTexture.loadFromFile("xyz.png"))
		cout << "Error could not load player image" << endl;
	playerImage.setTexture(pTexture);
	playerImage.setPosition(50, 300);

	game_over.loadFromFile("GAME_OVER.png");
	sgame_over.setTexture(game_over);
	sgame_over.setPosition(0, 0);
	tground.loadFromFile("ground.png");
	sground.setTexture(tground);



	tobstacle.loadFromFile("obstacle1.png");

	int t = 0;
	while (t < 16){
		for (i = 0; i < 4; i++)
		{
			for (j = 0; j < 4; j++)
			{
				sobstacle[t].setTexture(tobstacle);
				sobstacle[t].setTextureRect(IntRect(4 + j * 194, 4 + i * 109, 195, 109));
				t++;
			}
		}
	}


	pcoins.loadFromFile("coin.png");
	for (i = 0; i < 50; i++)
		coins[i].setTexture(pcoins);


	Font font;
	font.loadFromFile("naruto.ttf");

	String sentence;
	Text text(sentence, font, 40);
	text.setColor(Color(44, 127, 255));
	text.setStyle(Text::Bold);

	sentence = "Your score is:   ";

	////THE REAL GAME START FROM HERE/////
	while (window.isOpen())
	{



		if (flag == 0){


			window.draw(b1Image);
			b1Image.move(-10, 0);

			window.draw(b2Image);
			b2Image.move(-10, 0);

			if (b1Image.getPosition().x + 800 < 0) b1Image.setPosition(800, 0);
			if (b2Image.getPosition().x + 800 < 0) b2Image.setPosition(800, 0);

			float time = clock.getElapsedTime().asMilliseconds();
			clock.restart();
			timer += time;
			Event e;
			while (window.pollEvent(e))
			{

				switch (e.type)
				{
				case Event::Closed:
					window.close();
					break;
				case  Event::KeyPressed:
					if (e.key.code == Keyboard::Up)
					{
						source.y = Jump;  j = 0;
					}
					else if (e.key.code == Keyboard::Down)
					{
						source.y = Slide; s = 0;
					}
					break;

				}
			}




			///JUMP////
			if (source.y == Jump)
			{
				int  dif = 50;
				printf("height = %d \n",player_height);
				playerImage.setTextureRect(IntRect(j * 135, 136, 135, 115));
				if (j == 0) playerImage.setPosition(50, player_height - dif * 1);
				else if (j == 1) playerImage.setPosition(50, player_height - dif * 2);
				else if (j == 2) playerImage.setPosition(50, player_height - dif * 3);
				else if (j == 3) playerImage.setPosition(50, player_height - dif * 2);
				else if (j == 4) playerImage.setPosition(50, player_height - dif * 1);
				else if (j == 5) 
					playerImage.setPosition(50, player_height - dif * 0);


				window.draw(playerImage);
				j++;

				if (j >= 6)
				{

					source.x = 0;  source.y = Run;
				}



			}

			/////SLIDE//////
			else if (source.y == Slide)
			{
				playerImage.move(0, 2);
				int x1;
				if (s == 0)
					x1 = 50;
				if (s == 0)
				{
					playerImage.setTextureRect(IntRect(s * 145, 2 * 136, 145, 115));
					playerImage.setPosition(x1, playerImage.getPosition().y - 20);
				}

				else if (s == 4 || s == 5)
				{
					playerImage.setTextureRect(IntRect(s * 145, (2 * 136 + 30), 145, 80));
					playerImage.setPosition(x1, playerImage.getPosition().y + 20);
				}


				else{
					playerImage.setTextureRect(IntRect(s * 145, (2 * 136 + 55), 145, 60));
					playerImage.setPosition(x1, playerImage.getPosition().y + 35);
				}
				//x1 += 50;
				xod -= 30;
				window.draw(playerImage);
				s++;
				if (s >= 6)
				{
					source.x = 0;  source.y = Run;
				}
				playerImage.move(0, -2);

			}
			/////RUN////
			else if (source.y == Run){
				source.x++;
				if (source.x >= 6)
					source.x = 0;

				playerImage.setTextureRect(IntRect(source.x * 95, source.y, 95, 90));
				window.draw(playerImage);


			}
			///RUN END////


			////Obstacles moving ////
			if (timer > 50)
			{
				xod -= 25;
				timer = 0;
			}

			int c = 0;
			for (t = 0; t < 16; t++)
			{
				if (t % 2 == 0)
					sobstacle[t].setPosition(xod + distance[t], 292);
				else
					sobstacle[t].setPosition(xod + distance[t], 220);
				window.draw(sobstacle[t]);

				for (i = 0; i <3; i++)
				{
					if (t % 2 == 0)
						coins[c].setPosition(xod + distance[t] + i * 65, 220 + coin_sect[c]);
					if (t % 2 == 1)
						coins[c].setPosition(xod + distance[t] + i * 65, 339 + coin_sect[c]);

					window.draw(coins[c]);

					c++;

				}



			}
			sground.setPosition(0, 400);
			if (sobstacle[15].getPosition().x + 196 <= 0)  xod = 600;






			//// Throwing Ninja star/////
			if (Keyboard::isKeyPressed(Keyboard::Space))
			{
				ninja_starflag = 1;
				nsf = 0;
				ninja_star[ns].setPosition(playerImage.getPosition().x, playerImage.getPosition().y);
				ns++;

				if (ns > star_num) ninja_starflag = 0;
			}

			
			for (i = 0; i < ns && ninja_starflag == 1; i++)
			{

				if (ninja_star[ns - 1].getPosition().x <= 800)
				{
					ninja_star[i].setTextureRect(IntRect(nsf * 60, 0, 60, 50));
					ninja_star[i].move(20, 0);
					nsf++;
					nsf = nsf % 4;

					window.draw(ninja_star[i]);
				}

			}

			// C is Moving ////
			for (i = 0; i < 4; i++)
			{

				if (flag2 == 1)
					up = up - 30;
				if (up <= -60) flag2 = 0;

				if (flag2 == 0)
					up = up + 30;
				if (up >= 0) flag2 = 1;



				cImage[i].setPosition(xod + cdistance[i], 292 + up);
				cImage[i].move(-80 - i * 20, 0);
				window.draw(cImage[i]);

				python[i].setPosition(xod + pdistance[i], 292 + up);
				python[i].move(-80 - i * 20, 0);
				window.draw(python[i]);

				multi[i % 3].setPosition(xod + muldistance[i % 3], 292 + up);
				multi[i % 3].move(-80 - i * 20, 0);
				window.draw(multi[i % 3]);


			}

			///// C, python , obstacles are getting attacked ////

			int stari, cj;
			for (stari = 0; stari < 20; stari++)
			{
				for (cj = 0; cj < 4; cj++)
				{
					if (isCollide(cImage[cj], ninja_star[stari]))
					{
						cdistance[cj] = -1000;
						ninja_star[stari].setPosition(-400, -100);
						break;
					}

				}

				for (cj = 0; cj < 4; cj++)
				{
					if (isCollide(python[cj], ninja_star[stari]))
					{
						pdistance[cj] = -1000;
						ninja_star[stari].setPosition(-400, -100);
						break;
					}

				}

				for (cj = 0; cj < 16; cj++)
				{
					if (isCollide(sobstacle[cj], ninja_star[stari]))
					{
						ninja_star[stari].setPosition(-400, -100);
						break;
					}
				}

				for (cj = 0; cj < 3; cj++)
				{
					if (isCollide(multi[cj], ninja_star[stari]))
					{
						muldistance[cj] = -1000;
						ninja_star[stari].setPosition(-400, -100);
						break;
					}

				}



			}



			//printf("flag= %d  source= %d \n", jump_flag, source.y );
			///Ground checking ////
			int k;
			for (k = 0; k < 16; k++)
			{
				int x1 = playerImage.getPosition().x + 95;
				int y1 = playerImage.getPosition().y;
				int r1 = sobstacle[k].getPosition().x;
				int r2 = sobstacle[k].getPosition().x + 130;
				int m1 = sobstacle[k].getPosition().y;

				if (x1 >= r1 - 10 && playerImage.getPosition().x <= r2   && m1 - y1 >= 88)// here i have debugged from game over
				{
					if (jump_flag == 0){
						playerImage.setPosition(50, m1 - 95);
						source.y = Run;
						jump_flag = 1;
					}

					player_height = 300 - 100;
					break;

				}



				if (x1 >= r1 + 15 && playerImage.getPosition().x <= r2 && (m1 + 100 > y1))
				{

					window.clear();
					window.draw(sgame_over);
					int count1 = count;

					string str;
					while (count1>0)
					{
						int a;
						a = count1 % 10;
						count1 = count1 / 10;
						a = a + 48;
						char b = a;
						str = str + b;
					}

					reverse(str.begin(), str.end());
					sentence += str;
					printf("%s\n", sentence);
					text.setString(sentence);
					window.draw(text);
					flag = 1;

				}

			}

			if (k == 16) {
				jump_flag = 0;
				playerImage.setPosition(playerImage.getPosition().x, sground.getPosition().y - 95);
				player_height = 300;
			}
			if (playerImage.getPosition().x > 50) playerImage.move(-15, 0);

			////Intersection checking////
			for (i = 0; i < 50; i++)
			{
				if (isCollide(playerImage, coins[i]) == 1)
				{
					coin_sect[i] = -1000;
					count++;
					int count1 = count;





				}

			}




			


			window.draw(sground);
			//window.draw(python);

			window.display();
			window.clear();

		}

	}

	return 0;
}
