#include <SFML/Graphics.hpp>
#include<time.h>
#include<iostream>
#include<stdio.h>
#include<string>



using namespace std;
using namespace sf;
RenderWindow window(VideoMode(1200, 600), "The Game!");


int lives = 0, flag = 0;
int cdistance[10], pdistance[14], muldistance[10], pyac[20], pyth[20];
Sprite   ninja_star[20], sobstacle[20], python[8], python1[8], cxImage[5], cImage[5], sgame_over, hit_image;
String sentence;
Font font;
Text text(sentence, font, 40);

bool isCollide(Sprite  s1, Sprite s2)
{
	return s1.getGlobalBounds().intersects(s2.getGlobalBounds());
}
int coin_sect[50];
int tx[20];



int  attack(Sprite star)
{
	int cj;
	for (cj = 0; cj <= 2; cj++)
	{
		if (isCollide(cImage[cj], star) || isCollide(cxImage[cj], star))
		{
			cdistance[cj] = -1000;
			return 1;
		}

	}

	for (cj = 0; cj <= 2; cj++)
	{
		if (isCollide(python[cj], star))
		{
			pdistance[cj] = -1000;
			return 1;
		}

	}

	for (cj = 0; cj < 16; cj++)
	{
		if (isCollide(sobstacle[cj], star))
		{
			printf("Fuck fairuz\n");
			return 1;
		}

	}

	

	return 0;

}



int main()
{


	int i, xod = 600, upward = 200, j, s, posx = 0, posy = 0, flag2 = 1, up = 0, fl = 0, ninja_starflag = 0, total_trans = 11, pys = 0, life_flag = 0,
		nsf = 0, ns = 0, star_num =20, js = 0, ts = 0, flagjump = 0, player_height = 300, jump_flag = 0, Anife_flag = 0,
		sobstacle_index = 0, hole_flag = 0, holedex = 6, ms = 0, flag3 = 1, flag4 = 0,up1=0;

	enum Task  { Run, Jump, Slide };
	int distance[16];
	distance[0] = 0;
	int  count = 0;




	//////Positioning everything on the co ordinates///////
	j = 2;
	for (i = 1; i < 16; i++)
	{
		if (i <= 10)
			distance[i] = distance[i - 1] + 1200 + rand() % 100;

		else
			distance[i] = distance[i - 1] + 1600 + rand() % 100;

		if (i == 1)
			cdistance[0] = distance[i] - 300;

		if (i == 2)
		{

			cdistance[1] = distance[i] - 400;
			cdistance[2] = distance[i] - 200;
		}

		else if (i == 3)
		{

			pdistance[0] = distance[i] - 200;
		}
		else if (i == 4)
			pdistance[1] = distance[i] - 300;
		if (i == 5)
			pdistance[2] = distance[i] - 100;



		if (i == 6)
		{
			muldistance[0] = distance[i] - 300;
			muldistance[1] = distance[i] - 100;

		}

		if (i == 7)
		{
			muldistance[2] = distance[i] - 300;
			muldistance[3] = distance[i] - 200;
			muldistance[4] = distance[i] - 100;

		}




	}




	Clock clock, clock2;
	float timer = 0, delay = 0.1, timer2=0;
	float frameCounter = 0, switchFrame = 100, frameSpeed = 500;


	window.setFramerateLimit(10);
	Vector2i source(0, Run);

	Texture pTexture, bart, tground, tobstacle, game_over, pcoins, b1Texture, cTexture, cxTexture, pstar, pythontexture, python1texture, mulTexture, hit;
	Sprite playerImage, bars, sground, sgame_over, b1Image, b2Image;
	Sprite sobstacle[20], coins[100], ninja_star[20], multi[6];


	if (!b1Texture.loadFromFile("MrShadow3.png"))
		cout << "Error could not load player image" << endl;

	b1Image.setTexture(b1Texture);
	b2Image.setTexture(b1Texture);





	hit.loadFromFile("got_hit.png");
	hit_image.setTexture(hit);


	cTexture.loadFromFile("c_language.png");
	for (i = 0; i < 3; i++)
	{
		cImage[i].setTexture(cTexture);
		cImage[i].setPosition(600 + cdistance[i], 292);
	}

	cxTexture.loadFromFile("c_language_attack.png");
	for (i = 0; i < 3; i++)
	{
		cxImage[i].setTexture(cxTexture);
		cxImage[i].setPosition(1200,1200);
	}

	pythontexture.loadFromFile("c++.png");
	for (i = 0; i < 3; i++)
	{
		python[i].setTexture(pythontexture);
		python[i].setPosition(600 + pdistance[i], 292);
	}

	python1texture.loadFromFile("c1++.png");
	for (i = 0; i < 4; i++)
	{
		python1[i].setTexture(python1texture);
		python1[i].setPosition(600 + pdistance[i], 292);
	}

	mulTexture.loadFromFile("multimeter.png");
	for (i = 0; i < 5; i++)
		multi[i].setTexture(mulTexture);


	pstar.loadFromFile("ninja_star222.png");
	for (i = 0; i < 20; i++)
	{
		ninja_star[i].setTexture(pstar);
		ninja_star[i].setPosition(-50, -50);
	}



	b2Image.setPosition(800, 0);


	if (!pTexture.loadFromFile("xyz.png"))
		cout << "Error could not load player image" << endl;
	playerImage.setTexture(pTexture);
	playerImage.setPosition(50, 300);

	game_over.loadFromFile("GAME_OVER.png");
	sgame_over.setTexture(game_over);
	sgame_over.setPosition(0, 0);
	tground.loadFromFile("ground.png");
	sground.setTexture(tground);



	tobstacle.loadFromFile("obstacle1.png");

	int t = 0;
	while (t < 16){
		for (i = 0; i < 4; i++)
		{
			for (j = 0; j < 4; j++)
			{
				sobstacle[t].setTexture(tobstacle);
				sobstacle[t].setTextureRect(IntRect(4 + j * 194, 4 + i * 109, 195, 109));
				t++;
			}
		}
	}


	pcoins.loadFromFile("coin.png");
	for (i = 0; i < 50; i++)
		coins[i].setTexture(pcoins);



	font.loadFromFile("naruto.ttf");


	text.setColor(Color(44, 127, 255));
	text.setStyle(Text::Bold);

	sentence = "Your score is:   ";

	////THE REAL GAME START FROM HERE/////
	while (window.isOpen())
	{



		if (flag == 0){


			window.draw(b1Image);
			b1Image.move(-10, 0);

			window.draw(b2Image);
			b2Image.move(-10, 0);
			window.draw(sground);
			//////features///////



			if (b1Image.getPosition().x + 800 < 0) b1Image.setPosition(800, 0);
			if (b2Image.getPosition().x + 800 < 0) b2Image.setPosition(800, 0);



			float time = clock.getElapsedTime().asMilliseconds();
			clock.restart();
			timer += time;

			
			
			timer2 = clock2.getElapsedTime().asMilliseconds();
			
			cout << timer2 << endl;
			if (life_flag == 1 && timer2 > 500)
			{
			
				timer2 = 0;
				life_flag = 0;
				distance[sobstacle_index] = -1000;
				lives++;
				if (lives >= 20)
					life_flag = 1;
			}

			if (life_flag == 1)
			{
				

				if (lives >= 20)
				{
					printf("suck\n");
					if (flag3 == 1)
						up1 = up1 - 30;
					if (up1 <= -60) {
						flag4 = 1; flag3 = 0;
					}

					if (flag4 == 1)
						up1 = up1 + 50;

					hit_image.setPosition(playerImage.getPosition().x, 220 + up1);
					window.draw(hit_image);
					if (220 + up1 > 600)
						printf("Fuck\n");
						
				}
				else
				{
					hit_image.setPosition(playerImage.getPosition().x - 20, playerImage.getPosition().y - 10);
					window.draw(hit_image);
				}

			}

			Event e;
			while (window.pollEvent(e))
			{

				switch (e.type)
				{
				case Event::Closed:
					window.close();
					break;
				case Event::KeyPressed:
					if (e.key.code == Keyboard::Up)
					{
						source.y = Jump;  j = 0;
					}
					else if (e.key.code == Keyboard::Down)
					{
						source.y = Slide; s = 0;
					}
					break;

				}
			}




			///JUMP////
			if (life_flag == 0)
			{
				if (source.y == Jump)
				{
					int  dif = 50;
					printf("height = %d \n", player_height);
					playerImage.setTextureRect(IntRect(j * 135, 136, 135, 115));
					if (j == 0) playerImage.setPosition(50, player_height - dif * 1);
					else if (j == 1) playerImage.setPosition(50, player_height - dif * 2);
					else if (j == 2) playerImage.setPosition(50, player_height - dif * 3);
					else if (j == 3) playerImage.setPosition(50, player_height - dif * 2);
					else if (j == 4) playerImage.setPosition(50, player_height - dif * 1);
					else if (j == 5)
						playerImage.setPosition(50, player_height - dif * 0);
					xod -= 20;

					window.draw(playerImage);
					j++;

					if (j >= 6)
					{

						source.x = 0;  source.y = Run;
					}



				}

				/////SLIDE//////
				else if (source.y == Slide)
				{
					playerImage.move(0, 2);
					int x1;
					if (s == 0)
						x1 = 50;
					if (s == 0)
					{
						playerImage.setTextureRect(IntRect(s * 145, 2 * 136, 145, 115));
						playerImage.setPosition(x1, playerImage.getPosition().y - 20);
					}

					else if (s == 4 || s == 5)
					{
						playerImage.setTextureRect(IntRect(s * 145, (2 * 136 + 30), 145, 80));
						playerImage.setPosition(x1, playerImage.getPosition().y + 20);
					}


					else{
						playerImage.setTextureRect(IntRect(s * 145, (2 * 136 + 55), 145, 60));
						playerImage.setPosition(x1, playerImage.getPosition().y + 35);
					}

					xod -= 30;
					window.draw(playerImage);
					s++;
					if (s >= 6)
					{
						source.x = 0;  source.y = Run;
					}
					playerImage.move(0, -2);

				}
				/////RUN////
				else if (source.y == Run){
					source.x++;
					if (source.x >= 6)
						source.x = 0;

					playerImage.setTextureRect(IntRect(source.x * 95, source.y, 95, 90));
					window.draw(playerImage);


				}
				///RUN END////
			}

			////Obstacles moving ////
			if (timer > 50 && !life_flag)
			{
				xod -= 25;
				timer = 0;
			}

			int c = 0;
			for (t = 0; t < 16; t++)
			{
				if (t % 2 == 0)
					sobstacle[t].setPosition(xod + distance[t], 292);
				else
					sobstacle[t].setPosition(xod + distance[t], 220);
				window.draw(sobstacle[t]);

				for (i = 0; i <3; i++)
				{
					if (t % 2 == 0)
						coins[c].setPosition(xod + distance[t] + i * 65, 220 + coin_sect[c]);
					if (t % 2 == 1)
						coins[c].setPosition(xod + distance[t] + i * 65, 339 + coin_sect[c]);

					window.draw(coins[c]);

					c++;

				}



			}
			sground.setPosition(0, 400);
			if (sobstacle[15].getPosition().x + 196 <= 0)  xod = 600;



			//// Throwing Ninja star/////
			if (Keyboard::isKeyPressed(Keyboard::Space))
			{
				ninja_starflag = 1;
				nsf = 0;
				ninja_star[ns].setPosition(playerImage.getPosition().x, playerImage.getPosition().y);
				ns++;

				if (ns > star_num) ninja_starflag = 0;
			}


			for (i = 0; i < ns && ninja_starflag == 1; i++)
			{

				if (ninja_star[ns - 1].getPosition().x <= 1000)
				{
					ninja_star[i].setTextureRect(IntRect(nsf * 60, 0, 60, 50));
					ninja_star[i].move(40, 0);
					nsf++;
					nsf = nsf % 4;

					window.draw(ninja_star[i]);
				}

			}





			// C , python, multi  Moving and attacking////
			if (flag2 == 1)
				up = up - 30;
			if (up <= -60) flag2 = 0;

			if (flag2 == 0)
				up = up + 30;
			if (up >= 0) flag2 = 1;

			for (i = 0; i < 3; i++)
			{



				if ((cImage[i].getPosition().x - playerImage.getPosition().x)<200)
				{
					cxImage[i].setPosition(xod - 30 + cdistance[i], 290 + up);
					cxImage[i].move(-80 - i * 20, 0);
					window.draw(cxImage[i]);

				}
				else{
					cImage[i].setPosition(xod + cdistance[i], 250 + up);
					cImage[i].move(-80 - i * 20, 0);
					window.draw(cImage[i]);
				}

				python[i].setPosition(xod + pdistance[i], 320 + up);
				python[i].move(-80 - i * 20, 0);
				window.draw(python[i]);


				if ((python[i].getPosition().x - playerImage.getPosition().x) < 850)
				{
					python1[i].setTextureRect(IntRect(2 + 55 * pys, 2, 55, 54));
					python1[i].setPosition(xod + pdistance[i] - pyac[i] * 30+80 , 280);
					window.draw(python1[i]);

					if (pyth[i] == 0)
					{
						python1[i].setPosition(xod + pdistance[i] - pyac[i] * 30, 280);
						window.draw(python1[i]);
						
					}
					pyac[i]++;
				}

				else
				{
					python1[i].setTextureRect(IntRect(2, 2, 55, 54));
					python1[i].setPosition(xod + pdistance[i] + 40, 350 + up);
					python1[i].move(-80 - i * 20, 0);
					window.draw(python1[i]);

					python1[i].setTextureRect(IntRect(2, 2,55, 54));
					python1[i].setPosition(xod + pdistance[i] + 130, 350 + up);
					python1[i].move(-80 - i * 20, 0);
					window.draw(python1[i]);
				}



			}
			pys++;
			pys = pys % 6;








			for (i = 0; i < 5; i++)
			{
				multi[i].setTextureRect(IntRect(140 * ms + 4, 4, 140, 120));
				multi[i].setPosition(xod + muldistance[i], 292 + up);
				multi[i].move(-80 - i * 20, 0);
				window.draw(multi[i]);
				ms++;
				ms = ms % 3;
			}

			for (i = 0; i < 3; i++)
			{
				if (cImage[i].getPosition().x - playerImage.getPosition().x<20)
				{
				}
			}




			///// c , python, obstacles are getting attacked ////

			int stari, cj;

			for (i = 0; i < 20; i++)
			{
			
				cj = attack(ninja_star[i]);
				if (cj == 1)
					ninja_star[i].setPosition(-400, -100);

			}

		







			///Ground and train checking  and game over////
			int k, x1, y1, r1, r2, m1;
			for (k = 0; k < 16; k++)
			{
				x1 = playerImage.getPosition().x + 95;
				y1 = playerImage.getPosition().y;
				r1 = sobstacle[k].getPosition().x;
				r2 = sobstacle[k].getPosition().x + 130;
				m1 = sobstacle[k].getPosition().y;




				if (x1 >= r1 - 10 && playerImage.getPosition().x <= r2 && m1 - y1 >= 88)// here i have debugged from game over
				{
					if (jump_flag == 0){
						playerImage.setPosition(50, m1 - 95);
						source.y = Run;
						jump_flag = 1;
					}

					player_height = 300 - 100;
					break;

				}


				if (x1 >= r1 + 15 && playerImage.getPosition().x <= r2 && (m1 + 100 > y1) && life_flag==0)
				{

					//GAME_OVER(count);
					life_flag = 1;
					clock2.restart();
					sobstacle_index = k;
					

				}


			}

			for (i = 0; i <3; i++)
			{
				if (isCollide(playerImage, cxImage[i]))
				{
					cdistance[i] = -100;
					life_flag = 1;
					clock2.restart();
				}

				else if (isCollide(python[i], playerImage))
				{
				python[i].setPosition(-1000, 0);
				life_flag = 1;
				}

				else if (isCollide(python1[i], playerImage))
				{
					pdistance[i] = -1000;
					life_flag = 1;
					clock2.restart();
				}

			}

			for (i = 0; i < 5;i++)
			{
				if (isCollide(playerImage, multi[i]))
				{
					muldistance[i] = -1000;
					life_flag = 1;
					clock2.restart();
				}
			}





			if (k == 16) {
				jump_flag = 0;
				playerImage.setPosition(playerImage.getPosition().x, sground.getPosition().y - 95);
				player_height = 300;
			}
			if (playerImage.getPosition().x > 50) playerImage.move(-15, 0);





			//// Intersection checking with player and good things happen////
			for (i = 0; i < 50; i++)
			{
				if (isCollide(playerImage, coins[i]) == 1)
				{
					coin_sect[i] = -1000;
					count++;
					int count1 = count;


				}

			}





			//window.draw(hit_image);
		
			window.display();
			window.clear();

		}

	}


}


